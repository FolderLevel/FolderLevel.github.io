#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jan 26, 2023 04:35:25 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import AlogAnalyze_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class mainPanel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+143+185")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("AlogAnalyze")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.dataButton = tk.Button(self.top)
        self.dataButton.place(relx=0.283, rely=0.911, height=28, width=49)
        self.dataButton.configure(activebackground="beige")
        self.dataButton.configure(activeforeground="black")
        self.dataButton.configure(background="#d9d9d9")
        self.dataButton.configure(compound='left')
        self.dataButton.configure(disabledforeground="#a3a3a3")
        self.dataButton.configure(foreground="#000000")
        self.dataButton.configure(highlightbackground="#d9d9d9")
        self.dataButton.configure(highlightcolor="black")
        self.dataButton.configure(pady="0")
        self.dataButton.configure(text='''Data''')
        self.showButton = tk.Button(self.top)
        self.showButton.place(relx=0.583, rely=0.911, height=28, width=49)
        self.showButton.configure(activebackground="beige")
        self.showButton.configure(activeforeground="black")
        self.showButton.configure(background="#d9d9d9")
        self.showButton.configure(compound='left')
        self.showButton.configure(disabledforeground="#a3a3a3")
        self.showButton.configure(foreground="#000000")
        self.showButton.configure(highlightbackground="#d9d9d9")
        self.showButton.configure(highlightcolor="black")
        self.showButton.configure(pady="0")
        self.showButton.configure(text='''Show''')
        self.quitButton = tk.Button(self.top)
        self.quitButton.place(relx=0.833, rely=0.911, height=28, width=49)
        self.quitButton.configure(activebackground="beige")
        self.quitButton.configure(activeforeground="black")
        self.quitButton.configure(background="#d9d9d9")
        self.quitButton.configure(compound='left')
        self.quitButton.configure(disabledforeground="#a3a3a3")
        self.quitButton.configure(foreground="#000000")
        self.quitButton.configure(highlightbackground="#d9d9d9")
        self.quitButton.configure(highlightcolor="black")
        self.quitButton.configure(pady="0")
        self.quitButton.configure(text='''Quit''')
        self.filePathLabel = tk.Label(self.top)
        self.filePathLabel.place(relx=0.05, rely=0.044, height=23, width=57)
        self.filePathLabel.configure(activebackground="#f9f9f9")
        self.filePathLabel.configure(anchor='w')
        self.filePathLabel.configure(background="#d9d9d9")
        self.filePathLabel.configure(compound='left')
        self.filePathLabel.configure(disabledforeground="#a3a3a3")
        self.filePathLabel.configure(foreground="#000000")
        self.filePathLabel.configure(highlightbackground="#d9d9d9")
        self.filePathLabel.configure(highlightcolor="black")
        self.filePathLabel.configure(text='''File Path:''')
        self.filePathText = tk.Text(self.top)
        self.filePathText.place(relx=0.183, rely=0.044, relheight=0.049
                , relwidth=0.79)
        self.filePathText.configure(background="white")
        self.filePathText.configure(font="TkTextFont")
        self.filePathText.configure(foreground="black")
        self.filePathText.configure(highlightbackground="#d9d9d9")
        self.filePathText.configure(highlightcolor="black")
        self.filePathText.configure(insertbackground="black")
        self.filePathText.configure(selectbackground="#c4c4c4")
        self.filePathText.configure(selectforeground="black")
        self.filePathText.configure(wrap="word")
        self.regexLabel = tk.Label(self.top)
        self.regexLabel.place(relx=0.05, rely=0.111, height=23, width=67)
        self.regexLabel.configure(activebackground="#f9f9f9")
        self.regexLabel.configure(anchor='w')
        self.regexLabel.configure(background="#d9d9d9")
        self.regexLabel.configure(compound='left')
        self.regexLabel.configure(disabledforeground="#a3a3a3")
        self.regexLabel.configure(foreground="#000000")
        self.regexLabel.configure(highlightbackground="#d9d9d9")
        self.regexLabel.configure(highlightcolor="black")
        self.regexLabel.configure(text='''Regex:''')
        _style_code()
        self.regexText = ScrolledText(self.top)
        self.regexText.place(relx=0.183, rely=0.111, relheight=0.287
                , relwidth=0.792)
        self.regexText.configure(background="white")
        self.regexText.configure(font="TkTextFont")
        self.regexText.configure(foreground="black")
        self.regexText.configure(highlightbackground="#d9d9d9")
        self.regexText.configure(highlightcolor="black")
        self.regexText.configure(insertbackground="black")
        self.regexText.configure(insertborderwidth="3")
        self.regexText.configure(selectbackground="#c4c4c4")
        self.regexText.configure(selectforeground="black")
        self.regexText.configure(wrap="none")
        self.dataIndexLabel = tk.Label(self.top)
        self.dataIndexLabel.place(relx=0.05, rely=0.422, height=23, width=77)
        self.dataIndexLabel.configure(activebackground="#f9f9f9")
        self.dataIndexLabel.configure(anchor='w')
        self.dataIndexLabel.configure(background="#d9d9d9")
        self.dataIndexLabel.configure(compound='left')
        self.dataIndexLabel.configure(disabledforeground="#a3a3a3")
        self.dataIndexLabel.configure(foreground="#000000")
        self.dataIndexLabel.configure(highlightbackground="#d9d9d9")
        self.dataIndexLabel.configure(highlightcolor="black")
        self.dataIndexLabel.configure(text='''Data Index:''')
        self.dataIndexText = tk.Text(self.top)
        self.dataIndexText.place(relx=0.183, rely=0.422, relheight=0.049
                , relwidth=0.79)
        self.dataIndexText.configure(background="white")
        self.dataIndexText.configure(font="TkTextFont")
        self.dataIndexText.configure(foreground="black")
        self.dataIndexText.configure(highlightbackground="#d9d9d9")
        self.dataIndexText.configure(highlightcolor="black")
        self.dataIndexText.configure(insertbackground="black")
        self.dataIndexText.configure(selectbackground="#c4c4c4")
        self.dataIndexText.configure(selectforeground="black")
        self.dataIndexText.configure(wrap="word")
        self.dataTypeLabel = tk.Label(self.top)
        self.dataTypeLabel.place(relx=0.05, rely=0.489, height=23, width=77)
        self.dataTypeLabel.configure(activebackground="#f9f9f9")
        self.dataTypeLabel.configure(anchor='w')
        self.dataTypeLabel.configure(background="#d9d9d9")
        self.dataTypeLabel.configure(compound='left')
        self.dataTypeLabel.configure(disabledforeground="#a3a3a3")
        self.dataTypeLabel.configure(foreground="#000000")
        self.dataTypeLabel.configure(highlightbackground="#d9d9d9")
        self.dataTypeLabel.configure(highlightcolor="black")
        self.dataTypeLabel.configure(text='''Data Type:''')
        self.dataTypeText = tk.Text(self.top)
        self.dataTypeText.place(relx=0.183, rely=0.489, relheight=0.049
                , relwidth=0.79)
        self.dataTypeText.configure(background="white")
        self.dataTypeText.configure(font="TkTextFont")
        self.dataTypeText.configure(foreground="black")
        self.dataTypeText.configure(highlightbackground="#d9d9d9")
        self.dataTypeText.configure(highlightcolor="black")
        self.dataTypeText.configure(insertbackground="black")
        self.dataTypeText.configure(selectbackground="#c4c4c4")
        self.dataTypeText.configure(selectforeground="black")
        self.dataTypeText.configure(wrap="word")
        self.infoLabel = tk.Label(self.top)
        self.infoLabel.place(relx=0.05, rely=0.556, height=23, width=57)
        self.infoLabel.configure(activebackground="#f9f9f9")
        self.infoLabel.configure(anchor='w')
        self.infoLabel.configure(background="#d9d9d9")
        self.infoLabel.configure(compound='left')
        self.infoLabel.configure(disabledforeground="#a3a3a3")
        self.infoLabel.configure(foreground="#000000")
        self.infoLabel.configure(highlightbackground="#d9d9d9")
        self.infoLabel.configure(highlightcolor="black")
        self.infoLabel.configure(text='''Info:''')
        self.infoText = ScrolledText(self.top)
        self.infoText.place(relx=0.183, rely=0.556, relheight=0.331
                , relwidth=0.792)
        self.infoText.configure(background="white")
        self.infoText.configure(font="TkTextFont")
        self.infoText.configure(foreground="black")
        self.infoText.configure(highlightbackground="#d9d9d9")
        self.infoText.configure(highlightcolor="black")
        self.infoText.configure(insertbackground="black")
        self.infoText.configure(insertborderwidth="3")
        self.infoText.configure(selectbackground="#c4c4c4")
        self.infoText.configure(selectforeground="black")
        self.infoText.configure(wrap="none")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    AlogAnalyze_support.main()

if __name__ == '__main__':
    AlogAnalyze_support.main()




